package service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"github.com/magicalcosmos/goblogssr/graph/dao"
	"github.com/magicalcosmos/goblogssr/graph/generated"
	"github.com/magicalcosmos/goblogssr/graph/model"
)

// Page is the resolver for the page field.
func (r *articleWithPageResolver) Page(ctx context.Context, obj *model.ArticleWithPage) (*model.Page, error) {
	return &model.Page{
		Content:     &obj.Page.Content,
		PageSize:    &obj.Page.PageSize,
		Total:       &obj.Page.Total,
		CurrentPage: &obj.Page.CurrentPage,
		OrderBy:     &obj.Page.OrderBy,
	}, nil
}

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	var article = &model.Article{
		Title: *input.Title,
	}
	return dao.SaveArticle(article), nil
}

// UpdateArticle is the resolver for the updateArticle field.
func (r *mutationResolver) UpdateArticle(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	var article = &model.Article{
		ID:         *input.ID,
		Brief:      *input.Brief,
		Title:      *input.Title,
		Content:    *input.Content,
		Published:  *input.Published,
		UserId:     *input.UserID,
		CategoryId: *input.CategoryID,
		PublishAt:  *input.PublishAt,
	}
	return dao.UpdateArticle(article), nil
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *mutationResolver) DeleteArticle(ctx context.Context, input model.NewArticle) (string, error) {
	var article = &model.Article{
		ID: *input.ID,
	}
	return dao.DeleteArticleById(article), nil
}

// ArticleList is the resolver for the articleList field.
func (r *queryResolver) ArticleList(ctx context.Context, input model.Q) (*model.ArticleWithPage, error) {
	return dao.GetArticleList(input), nil
}

// GetArticleByID is the resolver for the getArticleById field.
func (r *queryResolver) GetArticleByID(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	var article = &model.Article{
		ID: *input.ID,
	}
	return dao.GetArticleById(article), nil
}

// ArticleWithPage returns generated.ArticleWithPageResolver implementation.
func (r *Resolver) ArticleWithPage() generated.ArticleWithPageResolver {
	return &articleWithPageResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type articleWithPageResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
