package service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/magicalcosmos/goblogssr/graph/generated"
	"github.com/magicalcosmos/goblogssr/graph/model"
)

// AuthorID is the resolver for the authorId field.
func (r *articleResolver) AuthorID(ctx context.Context, obj *model.Article) (int, error) {
	panic(fmt.Errorf("not implemented: AuthorID - authorId"))
}

// ParentID is the resolver for the parentId field.
func (r *articleResolver) ParentID(ctx context.Context, obj *model.Article) (int, error) {
	panic(fmt.Errorf("not implemented: ParentID - parentId"))
}

// CreateAt is the resolver for the createAt field.
func (r *articleResolver) CreateAt(ctx context.Context, obj *model.Article) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: CreateAt - createAt"))
}

// UpdateAt is the resolver for the updateAt field.
func (r *articleResolver) UpdateAt(ctx context.Context, obj *model.Article) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: UpdateAt - updateAt"))
}

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: CreateArticle - createArticle"))
}

// UpdateArticle is the resolver for the updateArticle field.
func (r *mutationResolver) UpdateArticle(ctx context.Context, input model.NewArticle) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: UpdateArticle - updateArticle"))
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context) ([]*model.Article, error) {
	panic(fmt.Errorf("not implemented: Articles - articles"))
}

// Article returns generated.ArticleResolver implementation.
func (r *Resolver) Article() generated.ArticleResolver { return &articleResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type articleResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
