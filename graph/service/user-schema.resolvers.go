package service

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"time"

	"github.com/magicalcosmos/goblogssr/graph/dao"
	"github.com/magicalcosmos/goblogssr/graph/generated"
	"github.com/magicalcosmos/goblogssr/graph/model"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.NewUser) (bool, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var user = &model.User{
		Username: *input.Username,
		Password: *input.Password,
		Email:    *input.Email,
	}
	return dao.SaveUser(user), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var user = &model.User{
		ID:       *input.ID,
		Username: *input.Username,
		Email:    *input.Email,
		Password: *input.Password,
	}
	return dao.UpdateUser(user), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.NewUser) (string, error) {
	var user = &model.User{
		ID: *input.ID,
	}
	return dao.DeleteUserById(user), nil
}

// UserList is the resolver for the userList field.
func (r *queryResolver) UserList(ctx context.Context, input model.Q) (*model.UserWithPage, error) {
	return dao.GetUserList(input), nil
}

// CreateAt is the resolver for the createAt field.
func (r *userResolver) CreateAt(ctx context.Context, obj *model.User) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: CreateAt - createAt"))
}

// UpdateAt is the resolver for the updateAt field.
func (r *userResolver) UpdateAt(ctx context.Context, obj *model.User) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: UpdateAt - updateAt"))
}

// Page is the resolver for the page field.
func (r *userWithPageResolver) Page(ctx context.Context, obj *model.UserWithPage) (*model.Page, error) {
	return &model.Page{
		Content:     &obj.Page.Content,
		PageSize:    &obj.Page.PageSize,
		Total:       &obj.Page.Total,
		CurrentPage: &obj.Page.CurrentPage,
		OrderBy:     &obj.Page.OrderBy,
	}, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// UserWithPage returns generated.UserWithPageResolver implementation.
func (r *Resolver) UserWithPage() generated.UserWithPageResolver { return &userWithPageResolver{r} }

type userResolver struct{ *Resolver }
type userWithPageResolver struct{ *Resolver }
